# -*- coding: utf-8 -*-
"""challenge3.ipynb

Automatically generated by Colab.sta

Original file is located at
    https://colab.research.google.com/drive/1O1WaW-Ne5XsiQFU2xByjdB_xAeEqTGN7
"""

#!pip install pandas scikit-learn matplotlib plotly mplfinance

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import mplfinance as mpf



def arquivo(file_path):
    try:
        # Carrega o arquivo Excel
        df = pd.read_excel(file_path, sheet_name='NFLX')  # Define a aba 'NFLX' como padrão
        return df
    except FileNotFoundError:
        print(f"Arquivo não encontrado: {file_path}")
        return None
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        return None

# Defina o caminho para o arquivo local no seu computador
file_path = "Challenge 3_NFLX.xlsx"

# Carregue o arquivo e converta a coluna 'Date' para formato de data
df = arquivo(file_path)
if df is not None:
    df['Date'] = pd.to_datetime(df['Date'])
    print(df.head())

def calcular_componentes(row):
    candle_size = row['High'] - row['Low']
    body = abs(row['Close'] - row['Open'])
    shadow = round((candle_size - body),2)

    return pd.Series({
        'candle_size': round((candle_size),2),
        'body': round(body,2),
        'body_proportion': round((body / candle_size) * 100, 2),
        'shadow': shadow,
        'upper_shadow': round((row['High'] - max(row['Open'], row['Close'])), 2),
        'lower_shadow': round((min(row['Open'], row['Close']) - row['Low']), 2)
    })


def separar_candles(file_path):
    df = arquivo(file_path)
    df['candle'] = (df['Close'] > df['Open']).astype(int)
    componentes = df.apply(calcular_componentes, axis=1)
    df = pd.concat([df, componentes], axis=1)
    return df


df = separar_candles(file_path)

# print(df[['candle', 'candle_size', 'body_proportion','upper_shadow','lower_shadow','shadow']].head())

def clusterizar_candles(df, num_clusters=4):
    features = df[['candle','body']]
    scaler = StandardScaler()
    features_scaled = scaler.fit_transform(features)
    kmeans = KMeans(n_clusters=num_clusters, random_state=0)
    df['cluster'] = kmeans.fit_predict(features_scaled)
    silhouette_avg = silhouette_score(features_scaled, df['cluster'])
    print(f'Silhouette Score: {silhouette_avg:.3f}')
    return df

df = clusterizar_candles(df)

# def imprimir_membros_clusters(df):
#     num_clusters = df['cluster'].nunique()
#     for cluster in range(num_clusters):
#         membros = df[df['cluster'] == cluster].head(10)
#         print(f'Membros do Cluster {cluster}:')
#         print(membros[['candle','candle_size','body','shadow','cluster']])
#         print('-' * 40)

# imprimir_membros_clusters(df)

# def plotar_clusters(df):
#     if 'cluster' not in df.columns:
#         print("Coluna 'cluster' não encontrada.")
#         return

#     clusters = df['cluster'].unique()
#     df['hover_text'] = df.apply(lambda row: f"Open: {row['Open']}<br>High: {row['High']}<br>Low: {row['Low']}<br>Close: {row['Close']}", axis=1)

#     for cluster in clusters:
#         df_cluster = df[df['cluster'] == cluster].head()
#         if not df_cluster.empty:
#             fig = go.Figure(data=[go.Candlestick(
#                 x=df_cluster['Date'],
#                 open=df_cluster['Open'],
#                 high=df_cluster['High'],
#                 low=df_cluster['Low'],
#                 close=df_cluster['Close'],
#                 name='Candlestick',
#                 hovertext=df_cluster['hover_text'],
#                 hoverinfo='text'
#             )])

#             fig.update_layout(
#                 title=f'Candlestick Chart - Cluster {cluster}',
#                 xaxis_title='Date',
#                 yaxis_title='Price',
#                 xaxis_rangeslider_visible=False,
#             )

#             fig.show()
#             print('\n')

# plotar_clusters(df)

def clusterizar_mais(df, num_clusters=20):
    clustered_dfs = []
    for cluster_id in df['cluster'].unique():
        cluster_data = df[df['cluster'] == cluster_id].copy()
        if len(cluster_data) > 1:
            features = cluster_data[['shadow','body_proportion']]
            scaler = StandardScaler()
            features_scaled = scaler.fit_transform(features)
            kmeans = KMeans(n_clusters=num_clusters, random_state=0)
            cluster_data['sub_cluster'] = kmeans.fit_predict(features_scaled)
            silhouette_avg = silhouette_score(features_scaled, cluster_data['sub_cluster'])
            print(f'Silhouette Score for cluster {cluster_id}: {silhouette_avg:.3f}')
        else:
            cluster_data['sub_cluster'] = 0
        clustered_dfs.append(cluster_data)
    return pd.concat(clustered_dfs, ignore_index=True)

df = clusterizar_mais(df)

# def imprimir_membros_clusters(df):
#     num_clusters = df['sub_cluster'].nunique()
#     for cluster in range(num_clusters):
#         membros = df[df['sub_cluster'] == cluster].head(10)
#         print(f'Membros do Cluster {cluster}:')
#         print(membros[['candle','body','shadow','upper_shadow','lower_shadow','cluster']])
#         print('-' * 40)

# imprimir_membros_clusters(df)

# def graf_clusters(df):
#     if 'sub_cluster' not in df.columns:
#         print("Coluna 'sub_cluster' não encontrada.")
#         return

#     df['hover_text'] = df.apply(lambda row: f"Open: {row['Open']}<br>High: {row['High']}<br>Low: {row['Low']}<br>Close: {row['Close']}", axis=1)

#     sub_clusters = df['sub_cluster'].unique()
#     for sub_cluster in sub_clusters:
#         df_sub_cluster = df[df['sub_cluster'] == sub_cluster].head(30)
#         if not df_sub_cluster.empty:
#             fig = go.Figure(data=[go.Candlestick(
#                 x=df_sub_cluster['Date'],
#                 open=df_sub_cluster['Open'],
#                 high=df_sub_cluster['High'],
#                 low=df_sub_cluster['Low'],
#                 close=df_sub_cluster['Close'],
#                 name='Candlestick',
#                 hovertext=df_sub_cluster['hover_text'],
#                 hoverinfo='text'
#             )])

#             fig.update_layout(
#                 title=f'Candlestick Chart - Sub-cluster {sub_cluster}',
#                 xaxis_title='Date',
#                 yaxis_title='Price',
#                 xaxis_rangeslider_visible=False,
#             )

#             fig.show()
#             print('\n')


# graf_clusters(df)

def plot_clusters(df, start_date="2020-09-01", end_date="2021-03-31"):

    df['Date'] = pd.to_datetime(df['Date'])
    df['hover_text'] = df.apply(lambda row: f"Open: {row['Open']}<br>High: {row['High']}<br>Low: {row['Low']}<br>Close: {row['Close']}", axis=1)
    df_filtered = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]
    if 'sub_cluster' not in df_filtered.columns:
        print("Coluna 'sub_cluster' não encontrada.")
        return
    sub_clusters = df_filtered['sub_cluster'].unique()
    fig = go.Figure()

    for sub_cluster in sub_clusters:
        df_sub_cluster = df_filtered[df_filtered['sub_cluster'] == sub_cluster].head(30)

        fig.add_trace(go.Candlestick(
            x=df_sub_cluster['Date'],
            open=df_sub_cluster['Open'],
            high=df_sub_cluster['High'],
            low=df_sub_cluster['Low'],
            close=df_sub_cluster['Close'],
            name=f'Sub-cluster {sub_cluster}',
            hovertext=df_sub_cluster['hover_text'],
            hoverinfo='text',
            increasing_line_color="green",
            decreasing_line_color="red"
        ))


        for idx, row in df_sub_cluster.iterrows():
            fig.add_annotation(
                x=row['Date'],
                y=row['High'] * 1.02,
                text=str(sub_cluster),
                showarrow=False,
                font=dict(size=10, color="black"),
                align="center"
            )


    fig.update_layout(
        title='Candlestick Chart - Sub-clusters (Set 2020 - Mar 2021)',
        xaxis_title='Date',
        yaxis_title='Price',
        xaxis_rangeslider_visible=False,
    )

    fig.show()

plot_clusters(df, start_date="2020-09-01", end_date="2021-03-31")